{
  "version": 3,
  "sources": ["../../@remix-run/router/dist/router.js", "../../react-router/lib/context.ts", "../../react-router/lib/hooks.tsx", "../../react-router/lib/components.tsx", "../../react-router/index.ts", "../../react-router-dom/dom.ts", "../../react-router-dom/index.tsx"],
  "sourcesContent": ["/**\n * @remix-run/router v1.6.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let isDataRouter = React.useContext(DataRouterContext) != null;\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRouter ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      errorElement = match.route.errorElement || defaultErrorElement;\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{ outlet, matches }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  To,\n  LazyRouteFunction,\n  RelativeRoutingType,\n  RouterState,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n  useRoutesImpl,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  let [state, setState] = React.useState(router.state);\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? (\n              <DataRoutes routes={router.routes} state={state} />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  state,\n}: {\n  routes: DataRouteObject[];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n", "import * as React from \"react\";\nimport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n  LazyRouteFunction,\n  FutureConfig,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useRouteId,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutesImpl,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nfunction mapRouteProperties(route: RouteObject) {\n  let updates: Partial<RouteObject> & { hasErrorBoundary: boolean } = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null,\n  };\n\n  if (route.Component) {\n    if (__DEV__) {\n      if (route.element) {\n        warning(\n          false,\n          \"You should not include both `Component` and `element` on your route - \" +\n            \"`Component` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      element: React.createElement(route.Component),\n      Component: undefined,\n    });\n  }\n\n  if (route.ErrorBoundary) {\n    if (__DEV__) {\n      if (route.errorElement) {\n        warning(\n          false,\n          \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" +\n            \"`ErrorBoundary` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      errorElement: React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined,\n    });\n  }\n\n  return updates;\n}\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  mapRouteProperties as UNSAFE_mapRouteProperties,\n  useRouteId as UNSAFE_useRouteId,\n  useRoutesImpl as UNSAFE_useRoutesImpl,\n};\n", "import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  options: SubmitOptions,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string | null = null;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr =\n        target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || null;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<FutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(\n  fetcherKey?: string,\n  fetcherRouteId?: string\n): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { action, method, encType, formData } = getFormSubmissionInfo(\n        target,\n        options,\n        basename\n      );\n\n      // Base options shared between fetch() and navigate()\n      let opts = {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n\n      if (fetcherKey) {\n        invariant(\n          fetcherRouteId != null,\n          \"No routeId available for useFetcher()\"\n        );\n        router.fetch(fetcherKey, fetcherRouteId, action, opts);\n      } else {\n        router.navigate(action, {\n          ...opts,\n          replace: options.replace,\n          fromRouteId: currentRouteId,\n        });\n      }\n    },\n    [router, basename, fetcherKey, fetcherRouteId, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["Action", "index", "window", "ResultType", "mapRouteProperties", "json", "aborted", "defer", "redirect", "mapRouteProperties", "savedScrollPositions", "updatedFetchers", "existingFetcher", "state", "mapRouteProperties", "result", "DataRouterContext", "createContext", "displayName", "DataRouterStateContext", "AwaitContext", "NavigationContext", "LocationContext", "RouteContext", "outlet", "matches", "RouteErrorContext", "useHref", "to", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "useLocation", "location", "useNavigationType", "navigationType", "useMatch", "pattern", "useMemo", "matchPath", "navigateEffectWarning", "useIsomorphicLayoutEffect", "cb", "isStatic", "static", "React", "useLayoutEffect", "useNavigate", "isDataRouter", "useNavigateStable", "useNavigateUnstable", "locationPathname", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "current", "navigate", "useCallback", "options", "warning", "go", "path", "resolveTo", "parse", "replace", "push", "state", "OutletContext", "useOutletContext", "useOutlet", "context", "useParams", "routeMatch", "length", "params", "useRoutes", "routes", "locationArg", "useRoutesImpl", "dataRouterState", "parentMatches", "parentParams", "parentPathname", "parentPathnameBase", "parentRoute", "route", "parentPath", "warningOnce", "endsWith", "locationFromContext", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "element", "undefined", "Component", "renderedMatches", "_renderMatches", "Object", "assign", "encodeLocation", "_extends", "key", "NavigationType", "Pop", "DefaultErrorComponent", "error", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "devInfo", "console", "fontStyle", "defaultErrorElement", "RenderErrorBoundary", "constructor", "props", "revalidation", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "render", "routeContext", "component", "children", "RenderedRoute", "dataRouterContext", "staticContext", "errorElement", "ErrorBoundary", "_deepestRenderedBoundaryId", "id", "errors", "errorIndex", "findIndex", "m", "keys", "join", "Math", "min", "reduceRight", "index", "concat", "getChildren", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "useDataRouterState", "useRouteContext", "useCurrentRouteId", "thisRoute", "useRouteId", "UseRouteId", "useNavigation", "UseNavigation", "navigation", "useRevalidator", "UseRevalidator", "revalidate", "router", "useMatches", "loaderData", "UseMatches", "data", "handle", "useLoaderData", "UseLoaderData", "routeId", "useRouteLoaderData", "UseRouteLoaderData", "useActionData", "UseActionData", "values", "actionData", "UseRouteError", "useAsyncValue", "value", "_data", "useAsyncError", "_error", "blockerId", "useBlocker", "shouldBlock", "UseBlocker", "blockerKey", "useState", "String", "blockerFunction", "args", "blocker", "getBlocker", "useEffect", "deleteBlocker", "blockers", "get", "UseNavigateStable", "fromRouteId", "alreadyWarned", "cond", "RouterProvider", "fallbackElement", "setState", "subscribe", "n", "opts", "preventScrollReset", "historyAction", "initialized", "DataRoutes", "MemoryRouter", "initialEntries", "initialIndex", "historyRef", "createMemoryHistory", "v5Compat", "history", "action", "listen", "Navigate", "Outlet", "Route", "_props", "Router", "basenameProp", "locationProp", "staticProp", "navigationContext", "locationContext", "trailingPathname", "stripBasename", "Routes", "createRoutesFromChildren", "Await", "resolve", "AwaitRenderStatus", "neverSettledPromise", "Promise", "AwaitErrorBoundary", "promise", "pending", "success", "defineProperty", "renderError", "reject", "catch", "_tracked", "then", "AbortedDeferredError", "ResolveAwait", "toRender", "Children", "forEach", "isValidElement", "treePath", "type", "Fragment", "apply", "name", "caseSensitive", "loader", "hasErrorBoundary", "shouldRevalidate", "lazy", "renderMatches", "mapRouteProperties", "updates", "createElement", "createMemoryRouter", "createRouter", "future", "v7_prependBasename", "hydrationData", "initialize", "defaultMethod", "defaultEncType", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "createSearchParams", "init", "URLSearchParams", "Array", "isArray", "Object", "keys", "reduce", "memo", "key", "value", "concat", "map", "v", "getSearchParamsForLocation", "locationSearch", "defaultSearchParams", "searchParams", "has", "getAll", "forEach", "append", "getFormSubmissionInfo", "options", "basename", "method", "action", "encType", "formData", "submissionTrigger", "attr", "getAttribute", "stripBasename", "FormData", "name", "type", "form", "Error", "createBrowserRouter", "routes", "opts", "createRouter", "future", "v7_prependBasename", "history", "createBrowserHistory", "window", "hydrationData", "parseHydrationData", "mapRouteProperties", "initialize", "createHashRouter", "createHashHistory", "state", "__staticRouterHydrationData", "errors", "_extends", "deserializeErrors", "entries", "serialized", "val", "__type", "ErrorResponse", "status", "statusText", "data", "internal", "error", "message", "stack", "BrowserRouter", "children", "historyRef", "useRef", "current", "v5Compat", "setState", "useState", "location", "React", "useLayoutEffect", "listen", "createElement", "Router", "navigationType", "navigator", "HashRouter", "HistoryRouter", "displayName", "isBrowser", "document", "ABSOLUTE_URL_REGEX", "Link", "forwardRef", "LinkWithRef", "ref", "onClick", "relative", "reloadDocument", "replace", "to", "preventScrollReset", "rest", "useContext", "NavigationContext", "absoluteHref", "isExternal", "test", "currentUrl", "URL", "href", "targetUrl", "startsWith", "protocol", "path", "pathname", "origin", "search", "hash", "e", "warning", "useHref", "internalOnClick", "useLinkClickHandler", "handleClick", "defaultPrevented", "NavLink", "NavLinkWithRef", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "useResolvedPath", "useLocation", "routerState", "DataRouterStateContext", "toPathname", "encodeLocation", "locationPathname", "nextLocationPathname", "navigation", "isActive", "charAt", "length", "isPending", "ariaCurrent", "undefined", "filter", "Boolean", "join", "Form", "props", "FormImpl", "forwardedRef", "onSubmit", "fetcherKey", "routeId", "submit", "useSubmitImpl", "formMethod", "formAction", "useFormAction", "submitHandler", "preventDefault", "submitter", "nativeEvent", "submitMethod", "currentTarget", "ScrollRestoration", "getKey", "storageKey", "useScrollRestoration", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "DataRouterContext", "invariant", "useDataRouterState", "replaceProp", "navigate", "useNavigate", "useCallback", "createPath", "useSearchParams", "defaultInit", "defaultSearchParamsRef", "hasSetSearchParamsRef", "useMemo", "setSearchParams", "nextInit", "navigateOptions", "newSearchParams", "useSubmit", "fetcherRouteId", "router", "UseSubmitImpl", "currentRouteId", "useRouteId", "formEncType", "fetch", "fromRouteId", "routeContext", "RouteContext", "match", "matches", "slice", "route", "index", "params", "delete", "toString", "joinPaths", "createFetcherForm", "FetcherForm", "fetcherId", "useFetcher", "UseFetcher", "id", "String", "load", "fetcher", "getFetcher", "fetcherWithComponents", "useEffect", "console", "warn", "deleteFetcher", "useFetchers", "UseFetchers", "fetchers", "values", "SCROLL_RESTORATION_STORAGE_KEY", "savedScrollPositions", "UseScrollRestoration", "restoreScrollPosition", "useMatches", "useNavigation", "scrollRestoration", "usePageHide", "scrollY", "sessionStorage", "setItem", "JSON", "stringify", "sessionPositions", "getItem", "parse", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "el", "getElementById", "scrollIntoView", "useBeforeUnload", "callback", "capture", "addEventListener", "removeEventListener", "usePrompt", "when", "blocker", "useBlocker", "reset", "proceed", "confirm", "setTimeout"]
}
